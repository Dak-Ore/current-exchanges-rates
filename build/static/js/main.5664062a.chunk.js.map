{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","items","setItems","dataD","setData","document","addEventListener","downloadFile","fetch","method","headers","then","response","blob","readExcel","Blob","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","e","bufferArray","target","result","wb","XLSX","type","dateNF","wsname","SheetNames","ws","Sheets","data","sheet_to_json","range","header","raw","onerror","error","d","Date","startDate","setStartDate","value","onClick","id","selected","onChange","date","datet","concat","getDate","getMonth","getFullYear","find","element","datetoData","dateFormat","EUR","USD","JPY","GBP","className","scope","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oNA8GeA,MAzGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEYF,mBAAS,IAFrB,mBAENG,EAFM,KAECC,EAFD,KAGbC,SAASC,iBAAiB,oBAAoB,WAC5CC,OAGF,IAAMA,EAAe,WAGnBC,MAAM,iGAAmD,CACzDC,OAAQ,MACRC,QAAS,CACP,eAAgB,uEAGnBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAEHC,EAAU,IAAIC,KAAK,CAACF,SAIlBC,EAAY,SAACE,GACD,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,kBAAkBN,GAE7BI,EAAWG,OAAS,SAACC,GACnB,IAAMC,EAAcD,EAAEE,OAAOC,OAEvBC,EAAKC,OAAUJ,EAAa,CAAEK,KAAM,SAAUC,OAAQ,eAEtDC,EAASJ,EAAGK,WAAW,GAEvBC,EAAKN,EAAGO,OAAOH,GAEfI,EAAOP,QAAWQ,cAAcH,EAAI,CAACI,MAAO,EAAGC,OAAO,CAAC,OAAO,MAAM,MAAM,MAAM,OAAOR,OAAQ,aAAcS,KAAI,IAEvHtB,EAAQkB,IAGVhB,EAAWqB,QAAU,SAACC,GACpBvB,EAAOuB,OAIH/B,MAAK,SAACgC,GACZzC,EAASyC,OAhDA,EAiEqB3C,mBAAS,IAAI4C,MAjElC,mBAiENC,EAjEM,KAiEKC,EAjEL,KAkEb,OACE,gCACE,uBACEhB,KAAK,SACLiB,MAAM,SACNC,QAAS,WACPzC,OALN,2FASE,cAAC,IAAD,CAAY0C,GAAG,OAAOC,SAAUL,EAAWM,SAAU,SAACC,IAzBvC,SAACA,GAClBN,EAAaM,GACb,IAEMC,EAFM,GAEMC,OAAOF,EAAKG,UAAU,IAAKH,EAAKI,WAAW,EAAG,IAAIJ,EAAKK,eACzErD,EAAQH,EAAMyD,MAAK,SAACC,GAAa,OAAOA,EAAQf,OAASS,MAoBSO,CAAWR,IAASS,WAAW,eAhB5F1D,EAGE,0CAAaA,EAAM2D,IAAnB,WAAgC3D,EAAM4D,IAAtC,WAAmD5D,EAAM6D,IAAzD,WAAsE7D,EAAM8D,OAF1E,gCAkBP,wBAAOC,UAAU,kBAAjB,UACE,gCACE,+BACE,oBAAIC,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,iBACA,oBAAIA,MAAM,MAAV,iBACA,oBAAIA,MAAM,MAAV,iBACA,oBAAIA,MAAM,MAAV,sBAGJ,gCACGlE,EAAMmE,KAAI,SAACzB,GAAD,OACT,+BACE,6BAAKA,EAAEC,OACP,6BAAKD,EAAEmB,MACP,6BAAKnB,EAAEoB,MACP,6BAAKpB,EAAEqB,MACP,6BAAKrB,EAAEsB,QALAtB,EAAEC,kBCpFRyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5D,MAAK,YAAkD,IAA/C6D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1E,SAAS2E,eAAe,SAM1BX,K","file":"static/js/main.5664062a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport * as XLSX from \"xlsx\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [dataD, setData] = useState([]);\n  document.addEventListener('DOMContentLoaded', function() {\n    downloadFile();\n  });\n\n  const downloadFile = () => {\n    // Lien du fichier\n    const fileURL = 'https://www.snb.ch/en/aux/xlsx/current_exchange_rates.xlsx';\n    fetch('https://cors-anywhere.herokuapp.com/' + fileURL , {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    },\n  })\n  .then((response) => response.blob())\n  .then((blob) => {\n    // Create a blop\n      readExcel(new Blob([blob]))\n  });\n  }\n  \n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n\n        const wb = XLSX.read(bufferArray, { type: \"buffer\", dateNF: 'dd,mm,yyyy'});\n\n        const wsname = wb.SheetNames[0];\n\n        const ws = wb.Sheets[wsname];\n        // Range = Débute ligne 6 , Header donne un nom au différente colonne, dateNF définit le format de la date, raw utilise des chaines formatés\n        const data = XLSX.utils.sheet_to_json(ws, {range: 6, header:[\"Date\",\"EUR\",\"USD\",\"JPY\",\"GBP\"],dateNF: 'dd,mm,yyyy', raw:false});\n\n        resolve(data);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n\n    promise.then((d) => {\n      setItems(d);\n    });\n  };\n  const datetoData = (date) => {\n    setStartDate(date);\n    const str = '';\n    // Formate la date en chaine pouvant être comparé avec celle dans items (+1 car renvois mois de 0 à 11)\n    const datet = str.concat(date.getDate(),',',(date.getMonth()+1),',',date.getFullYear());\n    setData(items.find((element) => {return element.Date === datet}));\n  }\n\n  const writeData = () => {\n    if (!dataD){\n      return 'Aucune donnée pour ce jour';\n    }\n    return <label>EUR: {dataD.EUR} - USD: {dataD.USD} - JPY: {dataD.JPY} - GBP: {dataD.GBP}</label>;\n  }\n  const [startDate, setStartDate] = useState(new Date());\n  return (\n    <div>\n      <input\n        type=\"button\"\n        value=\"Reload\"\n        onClick={() => {\n          downloadFile();\n        }}\n      />\n      https://cors-anywhere.herokuapp.com/ accepter la démo si les données se charge pas\n      <DatePicker id='date' selected={startDate} onChange={(date) => {datetoData(date)}}  dateFormat=\"dd,MM,yyyy\" />\n      {writeData()}\n      \n      <table className=\"table container\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Date</th>\n            <th scope=\"col\">EUR</th>\n            <th scope=\"col\">USD</th>\n            <th scope=\"col\">JPY</th>\n            <th scope=\"col\">GBP</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((d) => (\n            <tr key={d.Date}>\n              <th>{d.Date}</th>\n              <td>{d.EUR}</td>\n              <td>{d.USD}</td>\n              <th>{d.JPY}</th>\n              <td>{d.GBP}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}